<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title><%= list_name %> - Playlist Size Tracker</title>
    <link rel="icon" href="<%= img_url %>" type="image/png">

    <link rel="stylesheet" href="/styles/display.css">
    <link rel="preconnect" href="https://fonts.googleapis.com">
    <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>
    <link href="https://fonts.googleapis.com/css2?family=Inter:ital,opsz,wght@0,14..32,100..900;1,14..32,100..900&display=swap" rel="stylesheet">
</head>
<body>
    <% if (list_name == "Liked Songs") { %>
        <a href="https://open.spotify.com/collection/tracks" target="_blank"><h1><%= list_name %></h1></a><br>
    <% } else { %>
        <a href="https://open.spotify.com/playlist/<%= list_id %>" target="_blank"><h1><%= list_name %></h1></a><br>
    <% }%>

    <!-- Display the chart in a 'canvas' object -->
    <div id="chart_display">
        <canvas id="chart"></canvas>
    </div>

    <br>

    <!-- Options for the chart -->
    <div id="chart_options">
        <h2 id="chart_controls_title">Chart Controls</h2>
        <table id="options_row">
            <td>Hold <kbd>CTRL</kbd> and Scroll to Zoom</td>
            <td>Click and Drag to Pan</td>
            <td id="graph_end_select">
            <label id="graph_end_select_title">Graph Ends At:</label><br>
            <label>
                <input type="radio" name="change_end_date" value="now" id="change_end_date_radio1" checked>Now
            </label><br>
            <label>
                <input type="radio" name="change_end_date" value="last_added" id="change_end_date_radio2">Last Added Track
            </label><br>
            </td>
            <td><button id="reset_button">Reset View</button></td>
        </table>
    </div>

    <br>

    <div>
        <h2>Tracks:</h2>
        <table id="tracks_table">
            <tr>
                <th title="Click to Sort by Track No." onClick="sortTable(0, true)">#</th>
                <th title="Click to Sort Alphabetically by Track Name" onClick="sortTable(1)">Track</th>
                <th title="Click to Sort Alphabetically by Artist Name" colspan="<%= max_artists %>" onClick="sortTable(2)">Artists</th> <!-- Dynamic column width, depending on max no. of artists -->
                <th title="Click to Sort Alphabetically by Album Name" onClick="sortTable(<%= max_artists + 2 %>)">Album</th>
                <th title="Click to Sort by Date Added" onClick="sortTable(<%= max_artists + 3 %>)">Date Added</th>
                <th title="Click to Sort by Release Date" onClick="sortTable(<%= max_artists + 4 %>)">Release Date</th>
                <th title="Click to Sort by Duration" onClick="sortTable(<%= max_artists + 5 %>)">Duration</th>
                <th title="Click to Sort by Tempo" onClick="sortTable(<%= max_artists + 6 %>, true)">Tempo</th>
            </tr>
        <% for (var i = 0; i < display_data.length; i++) { %>
            <tr>
                <td class="track_numbers"><%- (i+1).toString() %></td>
                <td><%- display_data[i].name %></td>
                <% for (let artist of display_data[i].artists) { %>
                    <td><%- artist %></td>
                <% } %>
                <% for (let j = display_data[i].artists.length; j < max_artists; j++) { %>
                    <td></td>
                <% } %>
                <td><%- display_data[i].album %></td>
                <td><%= display_data[i].date_added %></td>
                <td><%= display_data[i].release_date %></td>
                <td><%- display_data[i].duration %></td>
                <td><%- display_data[i].tempo %></td>
            </tr>
        <% } %>
        </table>
    </div>

    <!-- Import libraries, Order is IMPORTANT -->
    <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/hammer.js/2.0.8/hammer.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/chartjs-plugin-zoom"></script>
    <script src="https://cdn.jsdelivr.net/npm/luxon/build/global/luxon.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/chartjs-adapter-luxon"></script>

    <script>
        // define functions first
        const setMaxDate = (boxChecked, minDate, maxDate) => {
        if (boxChecked)
            return new Date(maxDate + 0.05 * (maxDate - minDate));
        else return Date.now();
        }

        const stringToDate = (dateStr) => { // converts a string DD/MM/YYYY into a Date object
            const parts = dateStr.split('/');

            if (parts.length !== 3) // for invalid dates, return one that is arbitrarily far into the future
                return new Date(9999, 11, 31);

            const day = parseInt(parts[0]);
            const month = parseInt(parts[1]) - 1;
            const year = parseInt(parts[2]);

            return new Date(year, month, day);
        }

        const toSeconds = (timeStr) => { // converts a string MM:ss into the total seconds elapsed
            const parts = timeStr.split(':');

            if (parts.length !== 2) // for invalid times, return one that is arbitrarily large
                return Number.MAX_SAFE_INTEGER;

            const mins = parseInt(parts[0]);
            const secs = parseInt(parts[1])
            return (mins * 60) + secs;
        }
        // GLOBAL VARIABLES
        let CURRENTLY_SORTED = <%= max_artists + 3 %>; // the 'Date Added' column is initially sorted
        // the abs. value of this variable is the index of the currently sorted column
        // if negative, it is in DESCENDING order
        // if positive, it is in ASCENDING order

        const TABLE_HEADINGS = ["#", "Track", "Artists", "Album", "Date Added", "Release Date", "Duration", "Tempo (BPM)"];

        // get document elements
        const canvas = document.getElementById('chart');
        const change_graph_end = [document.getElementById('change_end_date_radio1'), document.getElementById('change_end_date_radio2')];
        const reset = document.getElementById('reset_button');

        const json_data = <%- JSON.stringify(chart_data) %>
        const tooltip_data = <%- JSON.stringify(tooltip_data) %>
        const track_links = <%- JSON.stringify(track_links) %>

        // format the date axis correctly
        const dates = json_data.map(d => new Date(d.x));
        let minDate = new Date(Math.min.apply(null, dates));
        let maxDate = new Date(Math.max.apply(null, dates));

        let axisEnd = Date.now(); // end the axis at Now by default (the checkbox changes this)
        let range = axisEnd - minDate;

        let axisStart = new Date(minDate - (0.05 * range));

        // setup chart data and config objects
        const data = {
                    datasets: [
                        {
                            label: 'Playlist Size',
                            data: json_data,
                            borderColor: '#400073',
                            borderWidth: 2,
                            backgroundColor: 'rgba(0, 0, 0, 0)',
                        }
                    ]
                };

        const config = {
            type: 'line',
            data: data,
            options: {
                responsive: true,
                interaction: {
                    mode: 'nearest'
                },
                onClick: (event, elements) => {
                    if (elements.length > 0) {
                        const index = elements[0].index; // get selected track no.
                        if (index < <%= num_tracks %>)
                            window.open(track_links[index], '_blank'); // redirect to the song's page on spotify
                    }
                },
                plugins: {
                  tooltip: {
                    callbacks: {
                        beforeLabel: (context) => {
                            if (context.parsed) {
                                let data;
                                // if the x-axis ends at Now, display correct tooltip for the 'as of now' item
                                if (context.parsed.y > <%= num_tracks %>) // this is done by detecting an item with a slightly higher y-value
                                    data = tooltip_data[<%= num_tracks %>];
                                else data = tooltip_data[context.parsed.y - 1];
                                return `${data.name} - ${data.artists}`;
                            }
                        },
                        label: (context) => {
                            if (context.parsed) {
                                if (context.parsed.y <= <%= num_tracks %>)
                                    return '#' + context.parsed.y;
                                else return '';
                            }
                        },
                        afterLabel: (context) => {
                            if (context.parsed) {
                                if (context.parsed.y <= <%= num_tracks %>)
                                    return 'Click to Listen on Spotify';
                            }
                        }
                    }
                  },
                  zoom: { // Allow zooming and panning around the chart
                    zoom: {
                        wheel: {
                            enabled: true,
                            modifierKey: 'ctrl' // require Ctrl to be pressed in order to scroll zoom
                        },
                        pinch: {
                            enabled: true
                        },
                        mode: 'xy'
                    },
                    pan: {
                        enabled: true,
                        mode: 'xy'
                    },
                    limits: {
                        x: {min: axisStart - (0.25 * range), max: axisEnd + (0.25 * range)},
                        y: {min: 0, max: <%= num_tracks + 10 %>}
                    }
                  }
                },
                scales: {
                    x: {
                        type: 'time',
                        time: {
                            tooltipFormat: 'DD T',
                            minUnit: 'day',
                            displayFormats: {
                                day: 'dd/MM/yy'
                            }
                        },
                        title: {
                            display: true,
                            text: 'Date',
                            font: {
                                size: 20,
                                weight: 'bold',
                                lineHeight: 1.2
                            },
                            padding: {top: 10, left: 0, right: 0, bottom: 0}

                        },
                        min: axisStart,
                        max: axisEnd
                    },
                    y: {
                        title: {
                            display: true,
                            text: 'No. of Tracks',
                            font: {
                                size: 20,
                                weight: 'bold',
                                lineHeight: 1.2
                            },
                            padding: {top: 0, left: 0, right: 20, bottom: 0}
                        },
                        min: 0,
                        max: <%= Math.ceil((num_tracks+1) / 10) * 10 %>,
                        ticks: {
                            stepSize: <%= Math.ceil(num_tracks / 10) %>
                        }
                    }
                }
            }
        };
        let chart = new Chart(canvas, config); // display chart

        change_graph_end.forEach(radio => { // listen for radio button changes
            radio.addEventListener('change', function() {
                axisEnd = setMaxDate(this.checked, minDate, maxDate); // change date axes
                let range = axisEnd - minDate;
                axisStart = new Date(minDate - (0.05 * range));

                if (this.checked) { // only react to a radio button being checked, NOT unchecked
                    if (this.value === 'last_added') { // if option 1 is selected, remove the Now data point
                        if (tooltip_data[tooltip_data.length - 1].name === "Size as of Now") {
                            tooltip_data.pop();
                            json_data.pop();
                        }
                    }
                    else { // if option 2 is selected, add a new data point to the list
                        if (tooltip_data[tooltip_data.length - 1].name !== "Size as of Now") {
                            tooltip_data.push({
                                "name": "Size as of Now", // this new point shows the size of the list Now, to smooth out the graph's shape at the end
                                "artists": <%= num_tracks %>
                            });
                            json_data.push({
                                "x": Date.now(),
                                "y": <%= num_tracks + 0.001 %>
                            })
                        }
                    }
                    // finally, set data values in the chart object
                    chart.data.datasets[0].data = json_data;
                    chart.config.options.scales.x.min = axisStart;
                    chart.config.options.scales.x.max = axisEnd;

                    chart.update(); // refresh the chart
                }
            });
        });


        reset.addEventListener('click', function() {
            location.reload();
        });

        function sortTable(columnIndex, numeric=false) {
            const table = document.getElementById("tracks_table");
            const headings = table.rows[0];
            const rows = Array.from(table.rows).slice(1); // Get all rows except the header
            let indexToSort = columnIndex;
            let displayedIndex = columnIndex;

            if (columnIndex === <%= max_artists + 3 %>) // for 'Date Added', use the same sort as '#' column
                indexToSort = 0;
            if (indexToSort === 0) // this is important for keeping track of which column is sorted,
                displayedIndex = <%= max_artists + 3 %>; // as well as displaying the small triangle indicator

            let reverse = false; // if the column is already sorted in ascending order, sort it in descending order
            if (CURRENTLY_SORTED === displayedIndex) {
                reverse = true;
                CURRENTLY_SORTED = displayedIndex * -1;
            }
            else CURRENTLY_SORTED = displayedIndex; // otherwise, sort in ascending order

            // Sort rows based on the content of the specified column
            let sortedRows = rows.sort((rowA, rowB) => {
                let cellA = rowA.cells[indexToSort].innerText.toLowerCase();
                let cellB = rowB.cells[indexToSort].innerText.toLowerCase();

                if (numeric) { // for the '#' column, sort numerically, not alphabetically
                    cellA = parseInt(cellA);
                    cellB = parseInt(cellB);
                }
                else if (columnIndex === <%= max_artists + 4 %>) { // the 'Release Date' column must be sorted as Dates, not alphabetically
                    cellA = stringToDate(cellA);
                    cellB = stringToDate(cellB);
                }
                else if (columnIndex === <%= max_artists + 5 %>) { // the duration column must be sorted using seconds, not alphabetically
                    cellA = toSeconds(cellA);
                    cellB = toSeconds(cellB);
                }

                let diff; // check which cell is bigger than the other
                if (cellA < cellB)
                    diff = -1;
                else if (cellA > cellB)
                    diff = 1;
                else diff = 0;

                if (reverse) // reverse the sort, if required
                    diff = diff * -1;

                return diff;
            });

            // Remove all rows from the table body
            while (table.tBodies[0].rows.length) {
                table.tBodies[0].deleteRow(0);
            }

            // remove all existing small triangles
            for (let i = 0; i < headings.cells.length; i++) {
                headings.cells[i].innerText = TABLE_HEADINGS[i];
            }

            // fix error with the small triangle display, since there are fewer headings than columns
            if (displayedIndex > <%= max_artists + 1 %>)
                displayedIndex -= <%= max_artists - 1 %>;

            // add small triangle to the sorted column's heading, to show that it is sorted
            headings.cells[displayedIndex].innerText += (CURRENTLY_SORTED > 0) ? "  ▼" : "  ▲";

            // re-add the table headings
            table.tBodies[0].appendChild(headings);

            // Append sorted rows to the table body
            sortedRows.forEach(row => table.tBodies[0].appendChild(row));
        }
    </script>
</body>
</html>